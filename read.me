# YouTube AI Bot

This project includes shell scripts for generating and uploading YouTube videos automatically. The title and description generation scripts now support using OpenAI for smarter, SEO friendly content.

## Configuration
Shared settings live in `sh_scripts/configs/base.conf` while per-channel
credentials are kept in `sh_scripts/channels.env` as JSON. Example keys for
`base.conf`:

```bash
VIDEO_FILE="sample.mp4"        # Input video
OPENAI_API_KEY="sk-..."        # Your OpenAI token
OPENAI_MODEL="gpt-3.5-turbo"   # Optional
KEYWORDS="lofi, study music"
```

Add your channels in `channels.env` with service specific sections:
```bash
CHANNEL_CONFIGS='[
  {
    "name": "default",
    "youtube": {
      "CLIENT_ID": "id",
      "CLIENT_SECRET": "secret",
      "REFRESH_TOKEN": "token",
      "STREAM_KEY": "stream"
    },
    "twitter": {
      "API_KEY": "",
      "API_SECRET": "",
      "ACCESS_TOKEN": "",
      "ACCESS_SECRET": ""
    }
  },
  {
    "name": "alt",
    "youtube": {
      "CLIENT_ID": "id2",
      "CLIENT_SECRET": "secret2",
      "REFRESH_TOKEN": "token2",
      "STREAM_KEY": "stream2"
    },
    "twitter": {
      "API_KEY": "",
      "API_SECRET": "",
      "ACCESS_TOKEN": "",
      "ACCESS_SECRET": ""
    }
  }
]'
```
Source this file and set `CHANNEL` before running scripts:
You can override its path with the `CHANNEL_ENV_FILE` variable.

```bash
sh sh_scripts/generate_title.sh
sh sh_scripts/generate_description.sh
```

If `OPENAI_API_KEY` is not set or the API call fails, the scripts fall back to basic templates.
Use helper scripts for common tasks:

- `sh sh_scripts/run_generation_pipeline.sh` - generate video, description, thumbnail and title sequentially.
- `sh sh_scripts/run_pipeline_and_upload.sh <hours> [options]` - run the pipeline and optionally upload and tweet.
- `sh sh_scripts/run_video_and_stream.sh <hours> [options]` - generate a long video, stream it and optionally tweet.

When scheduling jobs via the web UI you can also specify optional parameters that
will be passed to the script. For example a job with `scriptPath` set to
`sh_scripts/run_video_and_stream.sh` and `scriptParams` of `12 --post-twitter --tag lofi` will start a
12 hour stream and post to Twitter using the `lofi` tag.

See `src/main/resources/init.sql` for sample jobs including a standalone tweet job that runs `post_to_twitter.sh --tag lofi`. Each entry sets a `channel` so the scheduler loads the right credentials.

Twitter credentials are loaded from the selected channel configuration. If they are missing the Twitter posting script just logs a message and exits. Run:
```bash
sh sh_scripts/post_to_twitter.sh --tag lofi
```
The text is generated with ChatGPT unless you pass `--message` yourself.
