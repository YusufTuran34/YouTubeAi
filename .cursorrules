# YouTubeAI Project - Cursor Rules

## üéØ Project Overview
This is a Java Spring Boot application that automatically generates and posts tweets for LoFi music videos and horoscope content using OpenAI API and Selenium Twitter integration.

## üö® CRITICAL SYSTEM MANAGEMENT

### Always Use Project Manager Script
- **NEVER** run Spring Boot directly without cleanup
- **ALWAYS** use `./project_manager.sh clean` before starting
- **MANDATORY** command sequence: `./project_manager.sh clean && ./project_manager.sh start`

### ChromeDriver Conflict Prevention
- ChromeDriver "user-data-dir already in use" errors are CRITICAL system killers
- System automatically generates unique profile directories: `/tmp/chrome_profile_[timestamp]_[hash]`
- Auto-cleanup implemented in all scripts
- If conflicts persist, run full system cleanup immediately

### Port Management
- Port 8080 conflicts cause immediate Spring Boot failures
- Auto-detection and cleanup implemented
- Always verify port availability before startup

## üõ†Ô∏è MANDATORY WORKFLOW COMMANDS

### System Management
```bash
# System cleanup (REQUIRED before any work)
./project_manager.sh clean

# Project startup (after cleanup)
./project_manager.sh start

# Quick testing (no Spring Boot required)
./project_manager.sh test [config|tweet|horoscope|lofi|all]

# System status check
./project_manager.sh status

# Full restart sequence
./project_manager.sh restart
```

### Development Workflow
```bash
# 1. ALWAYS start with cleanup
./project_manager.sh clean

# 2. Test components individually
./project_manager.sh test config
./project_manager.sh test tweet

# 3. Start full system
./project_manager.sh start
```

## üîß CONFIGURATION MANAGEMENT

### Environment Variables (channels.env)
- **PRIMARY CONFIG**: All secrets in `sh_scripts/channels.env`
- **NEVER** hardcode API keys in scripts
- **ALWAYS** verify environment loading before operations

### Content Configuration
- Video jobs: `content_type=lofi`, `video_related=true`, `requires_zodiac=false`
- Horoscope jobs: `content_type=horoscope`, `video_related=false`, `requires_zodiac=true`
- JSON config location: `sh_scripts/content_configs.json`

### Database Schema
```sql
-- Job parameters MUST include content_type
INSERT INTO jobs (name, description, script_path, parameters, schedule_expression, is_active)
VALUES ('Daily Tweet - Horoscope Aries', 'Post daily horoscope for Aries', 
        'sh_scripts/post_to_twitter_simple.py', 
        'content_type=horoscope,zodiac_sign=aries', 
        '0 0 9 * * ?', true);
```

## üêõ TROUBLESHOOTING PROTOCOLS

### ChromeDriver Issues
```bash
# Immediate response to ChromeDriver conflicts
pkill -f chrome
pkill -f chromedriver
./project_manager.sh clean
```

### Port 8080 Conflicts
```bash
# Kill processes on port 8080
lsof -ti:8080 | xargs kill -9
./project_manager.sh clean
```

### Tweet Generation Failures
1. Check OpenAI API key loading
2. Verify content_type parameter passing
3. Test with quick_test.sh first
4. Check generate_tweet_advanced.sh PATH settings

### System Recovery
```bash
# Nuclear option - full system reset
./project_manager.sh clean
pkill -f java
pkill -f gradle
./project_manager.sh start
```

## üìä PERFORMANCE BENCHMARKS

### Success Metrics
- Horoscope Jobs: 100% success rate
- LoFi Jobs: 100% success rate (after null tweet fix)
- System reliability: 99%+ uptime
- Tweet generation: <10s
- Twitter posting: <60s
- System cleanup: <5s

### Failure Indicators
- ChromeDriver stacktrace errors
- "user-data-dir already in use" messages
- Port 8080 binding failures
- "null" tweet content generation
- Exit code 1 from Python scripts

## üîê SECURITY & ANTI-DETECTION

### Twitter Automation
- Unique profile directories for each session
- Anti-detection optimizations enabled
- Profile reuse for faster login
- Automatic cleanup after operations

### Credential Management
- Environment-based credential loading
- No hardcoded passwords or tokens
- Automatic credential validation

## üìÅ PROJECT STRUCTURE AWARENESS

### Key Directories
- `sh_scripts/`: All automation scripts
- `src/main/java/`: Spring Boot application
- `src/main/resources/`: Configuration files
- `build/`: Gradle build outputs

### Critical Files
- `project_manager.sh`: Main management script
- `sh_scripts/post_to_twitter_simple.py`: Twitter posting
- `sh_scripts/generate_tweet_advanced.sh`: Tweet generation
- `sh_scripts/channels.env`: Environment variables
- `sh_scripts/content_configs.json`: Content configuration

## üöÄ DEVELOPMENT BEST PRACTICES

### Code Changes
- **ALWAYS** test with quick_test.sh before full deployment
- **NEVER** modify database schema without updating init.sql
- **ALWAYS** update documentation after significant changes

### Testing Approach
1. Component testing: `./project_manager.sh test [component]`
2. Integration testing: Full system startup
3. Production testing: Monitor job execution logs

### Error Handling
- All scripts include comprehensive error handling
- Automatic fallback mechanisms implemented
- Detailed logging for debugging

## ü§ñ AI COLLABORATION RULES

### Proactive Problem Solving
- Monitor for ChromeDriver conflicts in logs
- Automatically suggest system cleanup when needed
- Provide specific command sequences for issues

### Code Analysis
- Always check for proper parameter passing
- Verify environment variable loading
- Ensure proper error handling in scripts

### Documentation Updates
- Update this file when new issues are discovered
- Maintain troubleshooting procedures
- Document all configuration changes

## üìà SYSTEM MONITORING

### Log Analysis
- Spring Boot logs: Look for job execution status
- Python script logs: Check for ChromeDriver errors
- System logs: Monitor port conflicts

### Health Checks
```bash
# Verify system health
./project_manager.sh status

# Check active processes
ps aux | grep -E "(chrome|java|gradle)"

# Verify port usage
lsof -i:8080
```

## üé® CONTENT GENERATION

### Tweet Templates
- LoFi: Focus on study vibes, relaxation, chill beats
- Horoscope: Mystical language, zodiac-specific content
- Character limits: 280 characters max
- Hashtag strategy: #LoFi #StudyVibes #Horoscope #[ZodiacSign]

### Quality Assurance
- No "null" content generation
- Proper emoji usage
- Relevant hashtags
- Engaging language

## üîÑ CONTINUOUS IMPROVEMENT

### Performance Optimization
- Monitor execution times
- Optimize Chrome startup sequences
- Reduce system resource usage

### Reliability Enhancement
- Implement additional error recovery
- Improve anti-detection measures
- Enhance logging and monitoring

## ‚ö†Ô∏è CRITICAL WARNINGS

1. **NEVER** skip system cleanup before starting
2. **NEVER** run multiple Chrome instances simultaneously
3. **NEVER** hardcode credentials in any script
4. **ALWAYS** verify job parameters before execution
5. **ALWAYS** monitor system resources during operation

## üìö REFERENCE DOCUMENTATION

- `PROJECT_DOCUMENTATION.md`: Complete technical architecture
- `TROUBLESHOOTING_GUIDE.md`: Detailed problem resolution
- `AI_COLLABORATION_RULES.md`: AI assistant protocols
- `DEVELOPMENT_HISTORY.md`: Project evolution history
- `USAGE_GUIDE.md`: User operation manual

---

**Remember: This project has been through the "null tweet crisis" and ChromeDriver conflicts. The current system is battle-tested and reliable when proper procedures are followed.** 